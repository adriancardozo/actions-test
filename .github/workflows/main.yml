name: Get branch

on:
  push:
    branches: ["main"]
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  if_merged:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: version
      id: version
      run: |
        echo ${{${{ github.ref }}#refs/heads/}}

#================================================================================================
# name: Echo env

# on:
#   push:
#     branches: ["main"]
#   workflow_dispatch:
# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}
# jobs:
#   if_merged:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#     steps:
#     - name: version
#       id: version
#       run: |
#         echo $REGISTRY

# ======================================================================================================

# name: Create tag

# on:
#   pull_request:
#     branches: ["main"]
#     types:
#       - closed
#   workflow_dispatch:
# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}
# jobs:
#   if_merged:
#     if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release-v')
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#     steps:
#     - name: version
#       id: version
#       run: |
#         echo "TAG_NAME=$(echo "${{ github.head_ref }}" | sed -e 's/^release-//')" >> $GITHUB_OUTPUT
#     - name: Create release
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         tag: ${{ steps.version.outputs.TAG_NAME }}
#       run: |
#         gh release create "$tag" \
#             --repo="$GITHUB_REPOSITORY" \
#             --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
#             --generate-notes
#     - run: |
#         echo ${{ steps.version.outputs.TAG_NAME }}
#   build-and-push-image:
#     if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release-v')
#     runs-on: ubuntu-latest
#     # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
#     permissions:
#       contents: read
#       packages: write
#       attestations: write
#       id-token: write
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#       # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
#       - name: Log in to the Container registry
#         uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#       # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
#       - name: Retrieve version
#         id: version
#         run: |
#           echo "TAG_NAME=$(echo "${{ github.head_ref }}" | sed -e 's/^release-v//')" >> $GITHUB_OUTPUT
#       - name: Extract metadata (tags, labels) for Docker
#         id: meta
#         uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           tags: |
#             ${{ steps.version.outputs.TAG_NAME }}
#             latest
#       # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
#       # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
#       # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
#       - name: Build and push Docker image
#         id: push
#         uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
#         with:
#           context: .
#           push: true
#           build-args: |
#             "VERSION=${{ steps.version.outputs.TAG_NAME }}"
#             "SELF_VERSION=hola"
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}

#       # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
#       - name: Generate artifact attestation
#         uses: actions/attest-build-provenance@v2
#         with:
#           subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
#           subject-digest: ${{ steps.push.outputs.digest }}
#           push-to-registry: true

#=====================================================================================================

# name: Create tag

# on:
#   pull_request:
#     branches: ["main"]
#     types:
#       - closed
#   workflow_dispatch:

# jobs:
#   if_merged:
#     if: github.event.pull_request.merged == true
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#     steps:
#     - name: Create release
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         tag: v1.9
#       run: |
#         gh release create "$tag" \
#             --repo="$GITHUB_REPOSITORY" \
#             --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
#             --generate-notes
#     - run: |
#         echo ${{ github.head_ref }}

#===========================================================================================================

# name: Build tag

# on:
#   push:
#     tags: ['v*']
#   workflow_dispatch:
# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}
# jobs:
#   build-and-push-image:
#     runs-on: ubuntu-latest
#     # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
#     permissions:
#       contents: read
#       packages: write
#       attestations: write
#       id-token: write
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#       # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
#       - name: Log in to the Container registry
#         uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#       # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
#       - name: Retrieve version
#         run: |
#           echo "TAG_NAME=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,' | sed -e 's/^v//')" >> $GITHUB_OUTPUT
#         id: version
#       - name: Extract metadata (tags, labels) for Docker
#         id: meta
#         uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           tags: ${{ steps.version.outputs.TAG_NAME }}
#       # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
#       # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
#       # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
#       - name: Build and push Docker image
#         id: push
#         uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
#         with:
#           context: .
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}

#       # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
#       - name: Generate artifact attestation
#         uses: actions/attest-build-provenance@v2
#         with:
#           subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
#           subject-digest: ${{ steps.push.outputs.digest }}
#           push-to-registry: true

#===========================================================================================================
# # This is a basic workflow to help you get started with Actions

# name: CD

# # Controls when the workflow will run
# on:
#   # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#     tags: ["v*"]
#   pull_request:
#     branches: [ "main" ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# # jobs:
# # #
# # name: Create and publish a Docker image

# # # Configures this workflow to run every time a change is pushed to the branch called `release`.
# # on:
# #   push:
# #     branches: ['release']

# # Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

# # There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
# jobs:
#   build-and-push-image:
#     runs-on: ubuntu-latest
#     # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
#     permissions:
#       contents: read
#       packages: write
#       attestations: write
#       id-token: write
#       #
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#       # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
#       - name: Log in to the Container registry
#         uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#       # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
#       - name: Retrieve version
#         run: |
#           echo "TAG_NAME=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,' | sed -e 's/^v//')" >> $GITHUB_OUTPUT
#         id: version
#       - name: Extract metadata (tags, labels) for Docker
#         id: meta
#         uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           tags: ${{ steps.version.outputs.TAG_NAME }}
#       # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
#       # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
#       # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
#       - name: Build and push Docker image
#         id: push
#         uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
#         with:
#           context: .
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
      
#       # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
#       - name: Generate artifact attestation
#         uses: actions/attest-build-provenance@v2
#         with:
#           subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
#           subject-digest: ${{ steps.push.outputs.digest }}
#           push-to-registry: true
      

#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - name: 'Login with Azure'
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}
#       - name: 'Pull and push image'
#         uses: azure/docker-login@v1
#         with:
#           login-server: ${{ format('https://{0}', vars.REGISTRY_URL) }}
#           username: ${{ vars.REGISTRY_USERNAME }}
#           password: ${{ secrets.REGISTRY_PASSWORD }}
#       - run: |
#           docker pull ghcr.io/chroma-core/chroma:0.5.4
#           docker tag ghcr.io/chroma-core/chroma:0.5.4 ${{ vars.REGISTRY_URL }}/chromadb:0.5.4
#           docker push ${{ vars.REGISTRY_URL }}/chromadb:0.5.4
#       - uses: azure/webapps-deploy@v2
#         with:
#           app-name: ${{ vars.WEBAPP_NAME }}
#           images: ${{ vars.REGISTRY_URL }}/chromadb:0.5.4
#       - uses: azure/appservice-settings@v1
#         with:
#           app-name: ${{ vars.WEBAPP_NAME }}
#           app-settings-json: ${{ secrets.APP_SETTINGS }}
#           id: settings
#       - name: 'Azure logout'
#         run: |
#           az logout
